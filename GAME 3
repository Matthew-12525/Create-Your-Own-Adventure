#NOT OPERABLE AT THE MOMENT!!!!!<
#OPERABLE!!!!!
""" 
The story is about a young man named Max who has to save princess Misty from  
the evil dragon Joshro. There are 4 endings that the user can have based on  
their choices throughout the course of the game. 
"""
""" 
ISSUES-
There's issues, and they're commented at their respective locations:((((((
""" 
""" 
IDEAS-  
#!!!ENDING ONE!!!(Lines 177, 199)
I want to take advantage of strings and their various uses to make a guessing game that rewards the player with +50 playerHealth if they get it right. \
I'll print one letter of the mystery word at the end of every pacifist option(ex: avoiding the fight with the ogre, working for the goblin, etc.) \
The word will be STRING, and the possibility to get the extra health will come right before the boss fight:)
""" 
#End of notes.
#End of notes. 
import random
#Functions
#Functions
def weaponSelect(): 
    global weaponStrength 
    if weapon == "bow": 
        weaponStrength = 4 
        print("A ranged weapon. It will allow you to strike from afar, but leaves \
you vulnerable up close. You take both it and a quiver full of sharp \
iron arrows.") 
    elif weapon == "axe": 
        weaponStrength = 7
        print("A sturdy but lightweight melee weapon. Its metal shimmers as \
you pick it up.") 
    elif weapon == "sword": 
        weaponStrength = 10 
        print("A longsword made out of high quality steel. Its high quality and \
damage comes at the cost of using more stamina with each attack. You struggle \
to put it in your holster, and the blacksmith insultingly laughs.")  
def end(): 
    print("You have been slain.") 
    enter = input("Press 'enter' on your keyboard to start a new game:)") 
    global restart
    restart = True

def fightSequence(enemy, playerHealth, location):       
    while enemy > 0 and playerHealth > 0: 
        print(enemy, "Enemy's health: ") 
        print(playerHealth, "Max's health: ")
        if allIn == False:
            prompt = input(" 'hit' or 'dodge'? ") 
            while prompt != "hit" and prompt != "dodge":
                prompt = input("That won't work this time! Do you want to 'hit' or 'dodge'? ") 
        elif allIn == True: 
            prompt = input(" 'hit' or 'dodge' or 'all in'? ")
            while prompt != "hit" and prompt != "dodge" and prompt != "all in":
                prompt = input("That won't work this time! Do you want to 'hit' or 'dodge' or go 'all in'? ")
        if prompt == "hit": 
            enemyDamage = random.randint(0,5) 
            enemy -= enemyDamage * weaponStrength 
            print("You hit the enemy and they took " + str(enemyDamage * weaponStrength) + " damage!") 
            playerDamage = random.randint(10,20) 
            playerHealth -= playerDamage 
            print("The enemy hit you and you took " + str(playerDamage) + " damage!") 
        elif prompt == "dodge": 
            damage = random.randint(0,5) 
            playerHealth -= damage 
            print("You dodged the attack and took " + str(damage) + " damage!") 
        elif prompt == "all in": 
            damage = random.randint(0,1) 
            if damage == 0: 
                end() 
                return
            elif damage == 1: 
                if location == "village": 
                    print(outroMessages[0]) 
                elif location == "forest": 
                    print(outroMessages[1]) 
        if playerHealth <= 0: 
            end()
            return
    if location == "village": 
                print(outroMessages[0]) 
    elif location == "forest": 
                print(outroMessages[1]) 

def deadlyTreasure(playerHealth): 
    print("While walking through the forest, you come across a golden box \
that shimmers in the sunlight. A key lays inside the tree next to the box, \
but the tree hole is too dark for you to see what else is inside the tree.") 
    key = input("Do you 'take the key' or 'let it be'? ")
    while key != "take the key" and key != "let it be":
        key = input("That won't work this time! Do you 'take the key' or 'let it be'? ")
    dieLive = random.randint(1,3) 
    if key == "take the key": 
        if dieLive == 1: 
            print("You reach inside the hole to grab the key, but a \
poisonous spider bites you and everything goes black- forever...") 
            end() 
            return playerHealth
        elif dieLive == 2 or 3: 
            print("You grab the key quickly, and open the box to find a potion \
that increases your health by 50. You drink it, and continue along the path.") 
            playerHealth = playerHealth + 50 
    elif key == "let it be": 
        print("You decide it's not worth the risk, and continue walking on the \
road.") 
    return playerHealth
    
def riverEscape():
    stepsYes = random.randint(21,30)
    print("You reach a river that could separate you from the ferocious carnivores, if you can reach the other side \
of course. Fortunately, an old fisherman is seen walking towards his flimsy boat, and you take this opportunity to ask the man \
for safe passage across the swift rapids. The only issue is, the man is not picking up the social cues that indicate your panic, so \
you must repeatedly prod him into picking up the pace to save both of your souls!")
    print("You need to continously say yes to the man " + str(stepsYes) + " times before the wolves advance the " + str(stepsYes) + " steps needed to close the distance \
and devour you.")
    prod = 0
    wolfRun = 0
    while prod != stepsYes and wolfRun != stepsYes:
        prodInput = input("Say 'yes': ")
        if prodInput == "yes":
            prod = prod + 1
            print("You've prodded the fisherman " + str(prod) + " total time(s)")
        wolfAdvance = random.randint(1,3)
        if wolfAdvance == 1 or wolfAdvance == 2:
            print("The werewolves advanced " + str(wolfRun) + " total step(s)")
            wolfRun = wolfRun + 1
        elif wolfAdvance == 3:
            print("The werewolves advanced " + str(wolfRun) + " total step(s)")
    if prod == stepsYes:
        print("The fisherman FINALLY finishes talking and gets the boat going, and you breathe a much-deserved \
sigh of relief as you sit back and watch the werewolves cower in fear from the rushing water.")
        print("Once you get across the river, the fisherman bids you farewell, and you venture on towards the castle.")
    elif wolfRun == stepsYes:
        print("The fisherman doesn't seem to get the hint, even after the " + str(prod) + " times you told him to hurry up. \
The werewolves close in swiftly, and you and the fisherman become a hungry family's next meal.")
        end()
        return

def stringWord(emptyStr):
    letter = random.choice(strings)
    strings.remove(letter)
    emptyStr += letter
    print("******")
    print(emptyStr)
    print("******")
    return emptyStr, strings
#Two functions in relation to the "caveWatchtower" scene
def cave(playerHealth):
    print("You hesitantly enter the cave, anxious about who or what might await you inside the dark depths. Fortunately, luck \
seems to favor you in this instance, and no trace of another inhabitant is visible inside the damp enclosure. In fact, you find \
a perfectly preserved elixir that has the label 'Miriam's Medical Miracle' stamped in fine lettering across the brownish glass. \
Before you take a swig, you doubt how safe ingesting the bottle's contents will be, and pause.")
    drinkDroptake = input("Do you 'drink' or 'drop' or 'take' the bottle? ")
    while drinkDroptake != "drink" and drinkDroptake != "drop" and drinkDroptake != "take":
        drinkDroptake = input("That won't work this time! Do you 'drink' or 'drop' or 'take' the bottle? ")
    if drinkDroptake == "drink":
        healthNothingdeadly = random.randint(1,3)
        if healthNothingdeadly == 1:
            print("You drink the potion, but after sitting down, you instantly pass out. You wake up in the morning feeling strangely \
healthier, and relish in the fact that you now have 50 more health!")
            playerHealth = playerHealth + 50
        elif healthNothingdeadly == 2:
            print("You drink the potion, but feel nothing. You wake up in the morning and notice that you are in fact still alive, \
and end up assuming that the benefits of the drink became nullified just like the person who left it.")
            ###DOESN'T CONTINUE CODE
            ###DOESN'T CONTINUE CODE
        elif healthNothingdeadly == 3:
            print("You drink the potion, and feel completely normal.")
            print(" ")
            print(" ")
            print(" ")
            print("You wake up, slay the dragon, save Misty, and live a happy and carefree life....NOT.")
            end()
            return
    elif drinkDroptake == "drop":
        print("You drop the potion carelessly on the ground, and am unsurprised as you witness the potion's contents dissolve the hard rock \
below. You go to sleep, and wake up, happy that you avoided a possibly deadly drink.")
    elif drinkDroptake == "take":
        print("For some almost supernatural reason, you feel as though you can use the potion for something greater, and decide \
to store it in your pack for later use. You have a dream that a large green creature asks you for the potion in exchange for \
safe passage across a path, but brush it off as your mind playing tricks on you and have a pretty uneventful rest of the night.")
        potionTroll = True
    return playerHealth, potionTroll
def swordPull():
    grunt = ["guh", "gurr", "rawr"]
    correct = True
    exercise = True
    gruntCount = 0
    while exercise:
        for j in range(2):
            userGrunt = []
            gruntCount += 1
            if correct == False:
                break
            if gruntCount == 6:
                exercise = False
                break
            for i in range(3):
                muscle = input("Exert your strength: ")
                userGrunt.append(muscle)
                print(userGrunt)
                if userGrunt[i] == grunt[i]:
                    pass
                else:
                    userGrunt = []
                    print("You strain your back and have to start over!")
                    gruntCount = 0
                    break
    print("Huzzah! The sword finally nudges out of its nested position, and you bask in its strangely magical glory. 'The Python' is \
engraved on the side of the blade, and you deduce that this is the name of the sword.")
    print("Attached to the handle of the blade is a leaflet that reveals why 'The Python' feels so powerful: 'The blade decides \
the enemy's fate, not you'. You take this as a good sign, and place the sword at your side as you get ready for bed. The night is otherwise \
uneventful, and you wake up feeling strangely refreshed after having that small victory the previous night!")
    pythonrandWepstrength = random.randint(0,100)
    weaponStrength = pythonrandWepstrength
    return weaponStrength
def watchTower():
    print("You enter the grey space, and find the area surprisingly empty, save for a single longsword of strikingly amazing quality. \
The only issue is the fact that the sword is coincidentally stuck in a slab of stone. You've seen this somewhere before, and know that \
swords stuck in stone are probably very good, but it's getting late and all that walking has you in an increasingly apparent state of exhaustion.")
    tryAvoid = input("Do you want to 'try' to take the sword out of the stone or 'avoid' the strenuous act altogether? ")
    while tryAvoid != "try" and tryAvoid != "avoid":
        tryAvoid = input("That won't work this time! \
Do you want to 'try' to take the sword out of the stone or 'avoid' the strenuous act altogether? ")
    if tryAvoid == "try":
        print("As everyone knows, making grunting sounds while exerting energy always helps you accomplish the desired task. \
This goes the same when trying to pull metal out of stone, and in order to successfully dislodge the blade from its spot, \n\
you must alternate between 'guh', 'gurr', and 'rawr'.")
        swordPull()
    if tryAvoid == "avoid":
        print("You decide that your rest is more important than something that almost certainly seems as if it could be useful to you, \
and go to sleep restlessly on the cold hard floor.")
###ADD A WEAPON THAT IS ONLY ATTAINABLE IF A CONDITION IS MET AND UNAVAILABLE OTHERWISE
introMessages = ["As you walk past the village tavern, a drunken ogre unfortunately \
mistakes you for the same villager that stole his favorite gold coin, \
and pulls out his rusty dagger to take it back.", "After walking through the forest some more, you come across a \
clearing that gives you a clear view of the castle where Misty is being held. \
As you stop to drink from your canteen, a goblin jumps out of the bushes and \
steals your pack! Goblins were hit especially hard by the last war, but you \
also know that that doesn't excuse it stealing your stuff.", "The castle doesn't seem so far now, which gives you a glimpse of hope \
that Misty can be saved. That hope quickly comes crashing down when you see a horde of werewolves descend from the dark depths of the \
the tree line, and you sprint towards the castle in hopes of finding safety from the hungry monsters.", "The sun starts to set, and you decide that you must find a nice place to hit the hay for the night. There are only two places available: \n\
a small and unassuming cave that offers shelter at the expense of not knowing whether or not an animal ALSO considers the cave its home, \n\
and an abandoned watchtower that accentuates the damaging effects of the past war."] 
outroMessages = ["The ogre stumbles to the ground, but before you can search him \
for anything valuable, a guard approaches from the distance, and \
you pick up the pace to the village exit where you can continue your quest. ", "The goblin collapses, and you take pity on the creature \
as you collect your items and continue towards the castle."] 
#GAME BEGINS AFTER HERE
#GAME BEGINS AFTER HERE
#Variables
#Variables
global goblin, ogre, troll, playerHealth, allIn, strings, emptyStr, weapon, restart, weaponStrength, potionTroll
restart = True

def main():
    global goblin, ogre, troll, playerHealth, allIn, strings, emptyStr, weapon, restart, weaponStrength, potionTroll
    restart = False
    goblin = 25 #CHANGE
    ogre = 100
    troll = 125
    playerHealth = 100 
    allIn = False 
    strings = ["s", "t", "r", "i", "n", "g"]
    emptyStr = ""
    print("---------------------------------------------------------------------------------------------------------------------------")
    print("You are Max, a young man who takes on the brave quest of saving the \
beautiful princess \
Misty from the evil dragon Joshro. Your story begins at the village \
blacksmith, where you must decide what kind of weapon you will bring with you \
on your journey.")  
    weapon = input("Do you take a 'bow', 'axe', or 'sword'?: ")
    while weapon != "bow" and weapon != "axe" and weapon != "sword":
        weapon = input("That weapon isn't here! Do you take a 'bow', 'axe', or 'sword'?: ")
    weaponSelect() 
    print(" ") 
    location = "village"
    if location == "village": 
        print(introMessages[0]) 
    elif location == "forest": 
        print(introMessages[1]) 
    fightRun = input("Do you want to 'fight' or 'run' away from the ogre? ")
    while fightRun != "fight" and fightRun != "run":
        fightRun = input("That won't work this time! Do you want to 'fight' or 'run' away from the ogre? ") 
    if fightRun == "fight": 
        fightSequence(ogre, playerHealth, location) 
        if restart:
            return
        allIn = True 
    elif fightRun == "run": 
        print("Before you can run, the ogre grabs your shirt and pulls you back, \
and asks in a booming but obviously slurred voice:''Bretton, do you have ma \
gold coin yet or not?''") 
        fightAvoid = input("'1'. Lie and say its back at the inn and you'll get it as soon as he lets you go.\n\
'2'. Tell him to let you go or else he'll have to worry about more than just a stupid gold coin. \n\
(pick a number): ")
        while fightAvoid != "1" and fightAvoid != "2":
            fightAvoid = input("That won't work this time! PICK A NUMBER: ")
        if fightAvoid == "1": 
            print("The ogre seems to like that option, and lets you go as he \
meanders back to the tavern. You regain your composure and continue walking \
to the village exit.")
            emptyStr, strings = stringWord(emptyStr)
        elif fightAvoid == "2": 
            print("The ogre becomes enraged and slams you on the ground, howling \
like a dog as he searches himself for the dagger he carries. You get back \
on your feet and pull out your weapon.") 
            fightSequence(ogre, playerHealth, location)
            if restart:
                return
            allIn = True
    print(" ")
    playerHealth = deadlyTreasure(playerHealth)
    if restart:
        return
    print(" ")
    location = "forest"
    if location == "village": 
        print(introMessages[0]) 
    elif location == "forest": 
        print(introMessages[1]) 
    fightPersuade = input("Do you want to 'fight' or 'persuade' the goblin? ")
    while fightPersuade != "fight" and fightPersuade != "persuade":
        fightPersuade = input("That won't work this time! Do you want to 'fight' or 'persuade' the goblin? ")
    if fightPersuade == "fight":
        fightSequence(goblin, playerHealth, location)
        if restart:
            return
        allIn = True 
    elif fightPersuade == "persuade":
        parkour = input("To catch up to the goblin, you can either 'slide' under a fallen log, or \
'vault' over a thorny bush. What do you do? ")
        while parkour != "slide" and parkour != "vault":
            parkour = input("That won't work this time! What do you do? ")
        if parkour == "slide":
            persuade = input("You successfully slide under the log, and find the goblin scurried up on a tree branch, \
just out of reach. What do you say to the scared creature? \n\
'1'. I won't hurt you I promise, just please give me back my stuff and I promise I'll make it up to you. \n\
'2'. Don't make me come up there you dirty vermin! \n\
(pick a number): ")
            while persuade != "1" and persuade != "2":
                persuade = input("That won't work this time! PICK A NUMBER: ")
            if persuade == "1":
                print("The goblin begrudgingly drops your items, but makes you promise that, under oath, you will come \
back after you finish your quest to come work for him to pay off your debt. You gather your pack and continue towards the castle.")
                emptyStr, strings = stringWord(emptyStr)
                #!!!ENDING ONE!!!
            elif persuade == "2":
                print("The goblin becomes furious after you insult and threaten him, and swiftly slashes you with his claws. \
You're able to get up, but because of the surprise attack, you've lost valuable health and strength.")
                weaponStrength = int(weaponStrength/2)
                playerHealth = int(playerHealth/2)
                fightSequence(goblin, playerHealth, location)
                allIn = True
        elif parkour == "vault":
            weakStrong = random.randint(0,1)
            if weakStrong == 0:
                print("You try to vault over the bush, but because you skipped leg day \
at the medieval gym, you fail and fall face first into some *very* sharp thorns")
                end()
                return
            elif weakStrong == 1:
                persuade = input("You successfully vault over the bush, and find the goblin scurried up on a tree branch, \
just out of reach. What do you say to the scared creature? \n\
'1'. I won't hurt you I promise, just please give me back my stuff and I promise I'll make it up to you. \n\
'2'. Don't make me come up there you dirty vermin! \n\
(pick a number): ")
                while persuade != "1" and persuade != "2":
                    persuade = input("That won't work this time! PICK A NUMBER: ")
                if persuade == "1":
                    print("The goblin begrudgingly drops your items, but makes you promise that, under oath, you will come \
back after you finish your quest to come work for him to pay off your debt. You gather your pack and continue towards the castle.")
                    emptyStr, strings = stringWord(emptyStr)
                            #!!!ENDING ONE!!!
                elif persuade == "2":
                    print("The goblin becomes furious after you insult and threaten him, and swiftly slashes you with his claws. \
You're able to get up, but because of the surprise attack, you've lost valuable health and strength.")
                    weaponStrength = int(weaponStrength/2)
                    playerHealth = int(playerHealth/2)
                    fightSequence(goblin, playerHealth, location)
                    if restart:
                        return
                    allIn = True
                    ##DOESN'T RESTART!!!! URGENT
                    ##DOESN'T RESTART!!!!
                    ##DOESN'T RESTART!!!!
                    ##DOESN'T RESTART!!!!
    print(" ")
    location = "river"
    if location == "village": 
        print(introMessages[0]) 
    elif location == "forest": 
        print(introMessages[1]) 
    elif location == "river": 
        print(introMessages[2])
    riverEscape()
    if restart:
        return
    print(" ")
    location = "cave/watchtower"
    if location == "village": 
        print(introMessages[0]) 
    elif location == "forest": 
        print(introMessages[1]) 
    elif location == "river": 
        print(introMessages[2])
    elif location == "cave/watchtower":
        print(introMessages[3])
    caveWatchtower = input("Do you take shelter in the 'cave' or the 'watchtower'? ")
    while caveWatchtower != "cave" and caveWatchtower != "watchtower":
        caveWatchtower = input("That won't work this time! Do you take shelter in the 'cave' or the 'watchtower'? ")
    if caveWatchtower == "cave":
        playerHealth, potionTroll = cave(playerHealth)
    potionTroll = False
    if caveWatchtower == "watchtower": 
        watchTower()
    #DOESN'T CONTINUE CODE!!!!!!!!
    print("poopoo")
while restart:
    main()
